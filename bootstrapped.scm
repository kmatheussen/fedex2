(define (test ___Arg1 ___Arg2)
  (define (___Func1)
    (let ((A ___Arg1))
      (if (equal? A ___Arg2)
        (begin
          (pretty-print "Correct: ")
          (pretty-print A)
          (pretty-print "")
          #t)
        (___Func2))))
  (define (___Func2)
    (let ((A ___Arg1))
      (let ((B ___Arg2))
        (begin
          (pretty-print "Wrong. Result: ")
          (pretty-print A)
          (pretty-print ". Correct: ")
          (pretty-print B)
          (pretty-print "")
          #f))))
  (___Func1))
(define (upper-case? ___Arg1)
  (define (___Func1)
    (let ((S ___Arg1))
      (if (member
            (car (string->list S))
            (string->list "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
        #t
        #f)))
  (___Func1))
(define (var? ___Arg1)
  (define (___Func1)
    (let ((A ___Arg1))
      (and (symbol? A)
           (upper-case? (symbol->string A)))))
  (___Func1))
(define (scheme-symbol? ___Arg1)
  (define (___Func1)
    (let ((A ___Arg1))
      (and (symbol? A) (not (var? A)))))
  (___Func1))
(define (with-clean-gensym ___Arg1)
  (define (___Func1)
    (let ((A ___Arg1))
      (begin (set! *my-gensym-N* 0) (A))))
  (___Func1))
(define (gensym-from-symbol-and-number ___Arg1 ___Arg2)
  (define (___Func1)
    (let ((S ___Arg1)) (let ((N ___Arg2)) (<_> S N))))
  (___Func1))
(define (my-gensym ___Arg1)
  (define (___Func1)
    (let ((V ___Arg1))
      (begin
        (set! *my-gensym-N* (+ 1 *my-gensym-N*))
        (gensym-from-symbol-and-number V *my-gensym-N*))))
  (___Func1))
(define (create-varlist)
  (define (___Func1) '())
  (___Func1))
(define (cons-varlist ___Arg1 ___Arg2 ___Arg3)
  (define (___Func1)
    (let ((Var ___Arg1))
      (let ((Value ___Arg2))
        (let ((Varlist ___Arg3))
          `((,Var ,Value) ,@Varlist)))))
  (___Func1))
(define (varlist-value ___Arg1 ___Arg2)
  (define (___Func1)
    (if (null? ___Arg2)
      '___not-in-varlist
      (___Func2)))
  (define (___Func2)
    (let ((A ___Arg1))
      (if (pair? ___Arg2)
        (let ((___MatchCar1 (car ___Arg2))
              (___MatchCdr2 (cdr ___Arg2)))
          (if (pair? ___MatchCar1)
            (let ((___MatchCar3 (car ___MatchCar1))
                  (___MatchCdr4 (cdr ___MatchCar1)))
              (if (equal? A ___MatchCar3)
                (if (pair? ___MatchCdr4)
                  (let ((___MatchCar5 (car ___MatchCdr4))
                        (___MatchCdr6 (cdr ___MatchCdr4)))
                    (let ((Value ___MatchCar5))
                      (if (null? ___MatchCdr6) Value (___Func3))))
                  (___Func3))
                (___Func3)))
            (___Func3)))
        (___Func3))))
  (define (___Func3)
    (let ((Var ___Arg1))
      (if (pair? ___Arg2)
        (let ((___MatchCar7 (car ___Arg2))
              (___MatchCdr8 (cdr ___Arg2)))
          (let ((V ___MatchCar7))
            (let ((Vs ___MatchCdr8)) (varlist-value Var Vs))))
        (error-no-match))))
  (___Func1))
(define (transform-to-check-similarities-0
         ___Arg1
         ___Arg2
         ___Arg3
         ___Arg4)
  (define (___Func1)
    (let ((R ___Arg1))
      (if (equal? R ___Arg3) R (___Func2))))
  (define (___Func2)
    (if (pair? ___Arg1)
      (let ((___MatchCar9 (car ___Arg1))
            (___MatchCdr10 (cdr ___Arg1)))
        (if (eqv? ___MatchCar9 'if)
          (if (pair? ___MatchCdr10)
            (let ((___MatchCar11 (car ___MatchCdr10))
                  (___MatchCdr12 (cdr ___MatchCdr10)))
              (let ((Test ___MatchCar11))
                (if (pair? ___MatchCdr12)
                  (let ((___MatchCar13 (car ___MatchCdr12))
                        (___MatchCdr14 (cdr ___MatchCdr12)))
                    (let ((Body ___MatchCar13))
                      (if (pair? ___MatchCdr14)
                        (let ((___MatchCar15 (car ___MatchCdr14))
                              (___MatchCdr16 (cdr ___MatchCdr14)))
                          (let ((F ___MatchCar15))
                            (if (null? ___MatchCdr16)
                              (if (equal? F ___Arg2)
                                (let ((R ___Arg3))
                                  (let ((Varlist ___Arg4))
                                    `(if ,Test
                                       ,(transform-to-check-similarities-0
                                          Body
                                          F
                                          R
                                          Varlist)
                                       ,F)))
                                (___Func3))
                              (___Func3))))
                        (___Func3))))
                  (___Func3))))
            (___Func3))
          (___Func3)))
      (___Func3)))
  (define (___Func3)
    (if (pair? ___Arg1)
      (let ((___MatchCar17 (car ___Arg1))
            (___MatchCdr18 (cdr ___Arg1)))
        (if (eqv? ___MatchCar17 'let)
          (if (pair? ___MatchCdr18)
            (let ((___MatchCar19 (car ___MatchCdr18))
                  (___MatchCdr20 (cdr ___MatchCdr18)))
              (if (pair? ___MatchCar19)
                (let ((___MatchCar23 (car ___MatchCar19))
                      (___MatchCdr24 (cdr ___MatchCar19)))
                  (if (pair? ___MatchCar23)
                    (let ((___MatchCar25 (car ___MatchCar23))
                          (___MatchCdr26 (cdr ___MatchCar23)))
                      (let ((Varname ___MatchCar25))
                        (if (pair? ___MatchCdr26)
                          (let ((___MatchCar27 (car ___MatchCdr26))
                                (___MatchCdr28 (cdr ___MatchCdr26)))
                            (let ((Value ___MatchCar27))
                              (if (null? ___MatchCdr28)
                                (if (null? ___MatchCdr24)
                                  (if (pair? ___MatchCdr20)
                                    (let ((___MatchCar21 (car ___MatchCdr20))
                                          (___MatchCdr22 (cdr ___MatchCdr20)))
                                      (let ((Body ___MatchCar21))
                                        (if (null? ___MatchCdr22)
                                          (let ((F ___Arg2))
                                            (let ((R ___Arg3))
                                              (let ((Varlist ___Arg4))
                                                (let ((Prev-value
                                                        (varlist-value
                                                          Varname
                                                          Varlist)))
                                                  (if (eq? Prev-value
                                                           '___not-in-varlist)
                                                    `(let ((,Varname ,Value))
                                                       ,(transform-to-check-similarities-0
                                                          Body
                                                          F
                                                          R
                                                          (cons-varlist
                                                            Varname
                                                            Value
                                                            Varlist)))
                                                    `(if (equal?
                                                           ,Varname
                                                           ,Value)
                                                       ,(transform-to-check-similarities-0
                                                          Body
                                                          F
                                                          R
                                                          Varlist)
                                                       ,F))))))
                                          (___Func4))))
                                    (___Func4))
                                  (___Func4))
                                (___Func4))))
                          (___Func4))))
                    (___Func4)))
                (___Func4)))
            (___Func4))
          (___Func4)))
      (___Func4)))
  (define (___Func4)
    (if (pair? ___Arg1)
      (let ((___MatchCar29 (car ___Arg1))
            (___MatchCdr30 (cdr ___Arg1)))
        (if (eqv? ___MatchCar29 'let)
          (if (pair? ___MatchCdr30)
            (let ((___MatchCar31 (car ___MatchCdr30))
                  (___MatchCdr32 (cdr ___MatchCdr30)))
              (let ((Vars ___MatchCar31))
                (if (pair? ___MatchCdr32)
                  (let ((___MatchCar33 (car ___MatchCdr32))
                        (___MatchCdr34 (cdr ___MatchCdr32)))
                    (let ((Body ___MatchCar33))
                      (if (null? ___MatchCdr34)
                        (let ((F ___Arg2))
                          (let ((R ___Arg3))
                            (let ((Varlist ___Arg4))
                              `(let ,Vars
                                 ,(transform-to-check-similarities-0
                                    Body
                                    F
                                    R
                                    Varlist)))))
                        (error-no-match))))
                  (error-no-match))))
            (error-no-match))
          (error-no-match)))
      (error-no-match)))
  (___Func1))
(define (transform-to-check-similarities
         ___Arg1
         ___Arg2
         ___Arg3)
  (define (___Func1)
    (let ((Body ___Arg1))
      (let ((Failure ___Arg2))
        (let ((Result ___Arg3))
          (transform-to-check-similarities-0
            Body
            Failure
            Result
            (create-varlist))))))
  (___Func1))
(define (has-pipe ___Arg1)
  (define (___Func1)
    (let ((M ___Arg1))
      (if (not (pair? M)) #f (___Func2))))
  (define (___Func2)
    (if (null? ___Arg1) #f (___Func3)))
  (define (___Func3)
    (let ((M ___Arg1))
      (if (eq? (car M) (string->symbol "|"))
        #t
        (___Func4))))
  (define (___Func4)
    (let ((M ___Arg1)) (has-pipe (cdr M))))
  (___Func1))
(define (pipe-to-dot ___Arg1)
  (define (___Func1)
    (if (null? ___Arg1) '() (___Func2)))
  (define (___Func2)
    (let ((M ___Arg1))
      (if (eq? (car M) (string->symbol "|"))
        (cadr M)
        (___Func3))))
  (define (___Func3)
    (let ((M ___Arg1))
      (cons (car M) (pipe-to-dot (cdr M)))))
  (___Func1))
(define (create-single-matcher
         ___Arg1
         ___Arg2
         ___Arg3
         ___Arg4)
  (define (___Func1)
    (if (null? ___Arg1)
      (if (null? ___Arg2)
        (let ((R ___Arg4)) R)
        (___Func2))
      (___Func2)))
  (define (___Func2)
    (let ((I ___Arg1))
      (if (null? ___Arg2)
        (let ((F ___Arg3))
          (let ((R ___Arg4)) `(if (null? ,I) ,R ,F)))
        (___Func3))))
  (define (___Func3)
    (let ((Input-var ___Arg1))
      (let ((Matcher-var ___Arg2))
        (let ((F ___Arg3))
          (let ((R ___Arg4))
            (if (has-pipe Matcher-var)
              (create-single-matcher
                Input-var
                (pipe-to-dot Matcher-var)
                F
                R)
              (___Func4)))))))
  (define (___Func4)
    (let ((Input-var ___Arg1))
      (let ((Matcher-var ___Arg2))
        (let ((F ___Arg3))
          (let ((R ___Arg4))
            (if (pair? Matcher-var)
              (let* ((Car-var (my-gensym '___MatchCar))
                     (Cdr-var (my-gensym '___MatchCdr))
                     (Inner-Result
                       (create-single-matcher
                         Cdr-var
                         (cdr Matcher-var)
                         F
                         R))
                     (New-Result
                       (create-single-matcher
                         Car-var
                         (car Matcher-var)
                         F
                         Inner-Result)))
                `(if (pair? ,Input-var)
                   (let ((,Car-var (car ,Input-var))
                         (,Cdr-var (cdr ,Input-var)))
                     ,New-Result)
                   ,F))
              (___Func5)))))))
  (define (___Func5)
    (let ((Input-var ___Arg1))
      (let ((Matcher-var ___Arg2))
        (let ((F ___Arg3))
          (let ((R ___Arg4))
            (if (var? Matcher-var)
              `(let ((,Matcher-var ,Input-var)) ,R)
              (___Func6)))))))
  (define (___Func6)
    (let ((Input-var ___Arg1))
      (let ((Matcher-var ___Arg2))
        (let ((F ___Arg3))
          (let ((R ___Arg4))
            (if (eq? Matcher-var '_) R (___Func7)))))))
  (define (___Func7)
    (let ((Input-var ___Arg1))
      (let ((Matcher-var ___Arg2))
        (let ((F ___Arg3))
          (let ((R ___Arg4))
            (if (scheme-symbol? Matcher-var)
              `(if (eqv? ,Input-var ',Matcher-var) ,R ,F)
              (___Func8)))))))
  (define (___Func8)
    (let ((Input-var ___Arg1))
      (let ((Matcher-var ___Arg2))
        (let ((F ___Arg3))
          (let ((R ___Arg4))
            `(if (eqv? ,Input-var ,Matcher-var) ,R ,F))))))
  (___Func1))
(define (create-matcher-matcher-0
         ___Arg1
         ___Arg2
         ___Arg3
         ___Arg4)
  (define (___Func1)
    (if (null? ___Arg1)
      (if (null? ___Arg2)
        (let ((Result ___Arg4)) Result)
        (___Func2))
      (___Func2)))
  (define (___Func2)
    (if (pair? ___Arg1)
      (let ((___MatchCar37 (car ___Arg1))
            (___MatchCdr38 (cdr ___Arg1)))
        (let ((I ___MatchCar37))
          (let ((Is ___MatchCdr38))
            (if (pair? ___Arg2)
              (let ((___MatchCar35 (car ___Arg2))
                    (___MatchCdr36 (cdr ___Arg2)))
                (let ((M ___MatchCar35))
                  (let ((Ms ___MatchCdr36))
                    (let ((Failed ___Arg3))
                      (let ((Result ___Arg4))
                        (create-single-matcher
                          I
                          M
                          Failed
                          (create-matcher-matcher-0 Is Ms Failed Result)))))))
              (error-no-match)))))
      (error-no-match)))
  (___Func1))
(define (create-matcher-matcher
         ___Arg1
         ___Arg2
         ___Arg3
         ___Arg4)
  (define (___Func1)
    (let ((Inputs ___Arg1))
      (let ((Matchers ___Arg2))
        (let ((Failure ___Arg3))
          (let ((Result ___Arg4))
            (transform-to-check-similarities
              (create-matcher-matcher-0
                Inputs
                Matchers
                Failure
                Result)
              Failure
              Result))))))
  (___Func1))
(define (list-split-0 ___Arg1 ___Arg2 ___Arg3 ___Arg4)
  (define (___Func1)
    (let ((Before ___Arg1))
      (if (null? ___Arg2)
        (let ((Where ___Arg3))
          (let ((Func ___Arg4)) (Func Before '())))
        (___Func2))))
  (define (___Func2)
    (let ((Before ___Arg1))
      (if (pair? ___Arg2)
        (let ((___MatchCar39 (car ___Arg2))
              (___MatchCdr40 (cdr ___Arg2)))
          (let ((Where ___MatchCar39))
            (let ((After ___MatchCdr40))
              (if (equal? Where ___Arg3)
                (let ((Func ___Arg4)) (Func Before After))
                (___Func3)))))
        (___Func3))))
  (define (___Func3)
    (let ((Before ___Arg1))
      (if (pair? ___Arg2)
        (let ((___MatchCar41 (car ___Arg2))
              (___MatchCdr42 (cdr ___Arg2)))
          (let ((A ___MatchCar41))
            (let ((After ___MatchCdr42))
              (let ((Where ___Arg3))
                (let ((Func ___Arg4))
                  (list-split-0
                    (append Before (list A))
                    After
                    Where
                    Func))))))
        (error-no-match))))
  (___Func1))
(define (list-split ___Arg1 ___Arg2 ___Arg3)
  (define (___Func1)
    (let ((All ___Arg1))
      (let ((Where ___Arg2))
        (let ((Func ___Arg3))
          (list-split-0 '() All Where Func)))))
  (___Func1))
(define (get-matcher-where ___Arg1 ___Arg2)
  (define (___Func1)
    (if (pair? ___Arg1)
      (let ((___MatchCar43 (car ___Arg1))
            (___MatchCdr44 (cdr ___Arg1)))
        (let ((Where ___MatchCar43))
          (if (pair? ___MatchCdr44)
            (let ((___MatchCar45 (car ___MatchCdr44))
                  (___MatchCdr46 (cdr ___MatchCdr44)))
              (let ((What ___MatchCar45))
                (let ((Rest ___MatchCdr46))
                  (let ((Kont ___Arg2))
                    (if (eqv? Where :where)
                      (Kont What Rest)
                      (___Func2))))))
            (___Func2))))
      (___Func2)))
  (define (___Func2)
    (let ((Rest ___Arg1))
      (let ((Kont ___Arg2)) (Kont '___no_where Rest))))
  (___Func1))
(define (get-matchers ___Arg1)
  (define (___Func1)
    (if (null? ___Arg1) '() (___Func2)))
  (define (___Func2)
    (let ((All ___Arg1))
      (list-split
        All
        ':>
        (lambda (Before After)
          (let ((Result (car After)))
            (get-matcher-where
              (cdr After)
              (lambda (Where Rest)
                `((,Before ,Result ,Where) ,@(get-matchers Rest)))))))))
  (___Func1))
(define (get-args ___Arg1)
  (define (___Func1)
    (if (eqv? ___Arg1 0) '() (___Func2)))
  (define (___Func2)
    (let ((N ___Arg1))
      (append
        (get-args (- N 1))
        `(,(gensym-from-symbol-and-number '___Arg N)))))
  (___Func1))
(define (get-function-names ___Arg1)
  (define (___Func1)
    (if (eqv? ___Arg1 0) '() (___Func2)))
  (define (___Func2)
    (let ((N ___Arg1))
      (append
        (get-function-names (- N 1))
        `((,(gensym-from-symbol-and-number '___Func N))))))
  (___Func1))
(define (make-local-func ___Arg1 ___Arg2)
  (define (___Func1)
    (let ((Name ___Arg1))
      (let ((Body ___Arg2)) `(define ,Name ,Body))))
  (___Func1))
(define (create-local-funcs-0 ___Arg1 ___Arg2 ___Arg3)
  (define (___Func1)
    (if (null? ___Arg2)
      (if (pair? ___Arg3)
        (let ((___MatchCar47 (car ___Arg3))
              (___MatchCdr48 (cdr ___Arg3)))
          (let ((Error-func ___MatchCar47))
            (if (null? ___MatchCdr48) '() (___Func2))))
        (___Func2))
      (___Func2)))
  (define (___Func2)
    (let ((Is ___Arg1))
      (if (pair? ___Arg2)
        (let ((___MatchCar53 (car ___Arg2))
              (___MatchCdr54 (cdr ___Arg2)))
          (let ((M ___MatchCar53))
            (let ((Ms ___MatchCdr54))
              (if (pair? ___Arg3)
                (let ((___MatchCar49 (car ___Arg3))
                      (___MatchCdr50 (cdr ___Arg3)))
                  (let ((F1 ___MatchCar49))
                    (if (pair? ___MatchCdr50)
                      (let ((___MatchCar51 (car ___MatchCdr50))
                            (___MatchCdr52 (cdr ___MatchCdr50)))
                        (let ((F2 ___MatchCar51))
                          (let ((Fs ___MatchCdr52))
                            (let* ((Left-side (nth 1 M))
                                   (Right-side (nth 2 M))
                                   (Where (nth 3 M)))
                              `(,(make-local-func
                                   F1
                                   (create-matcher-matcher
                                     Is
                                     Left-side
                                     F2
                                     (if (eq? Where '___no_where)
                                       Right-side
                                       `(if ,Where ,Right-side ,F2))))
                                ,@(create-local-funcs-0 Is Ms `(,F2 ,@Fs)))))))
                      (error-no-match))))
                (error-no-match)))))
        (error-no-match))))
  (___Func1))
(define (create-local-funcs ___Arg1)
  (define (___Func1)
    (let ((All ___Arg1))
      (let* ((Matchers (get-matchers All))
             (Args (get-args (length (car (car Matchers)))))
             (Function-names
               (append
                 (get-function-names (length Matchers))
                 `((error-no-match)))))
        (create-local-funcs-0
          Args
          Matchers
          Function-names))))
  (___Func1))
(define (create-matcher-func ___Arg1 ___Arg2)
  (define (___Func1)
    (let ((Name ___Arg1))
      (let ((Matchers ___Arg2))
        (let* ((Num-args
                 (list-split
                   Matchers
                   ':>
                   (lambda (Before After) (length Before))))
               (Args (get-args Num-args)))
          (append
            '(define)
            `((,Name ,@Args))
            (create-local-funcs Matchers)
            (get-function-names 1))))))
  (___Func1))
